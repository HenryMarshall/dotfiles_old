snippet f "function" b!
function ${1:myFunc}($2) {
  $0
}
endsnippet

snippet for "for" b!
for (let ${2:ii} = 0, max = ${1:10}; ${2:ii} < max; ${2:ii}++) {
  $0
}
endsnippet

snippet forarr "for elements in array" b!
for (let ${3:ii} = 0; ${3:ii} < ${1:arr}.length; ${3:ii}++) {
  const ${2:elem} = ${1}[${3:ii}]
  $0
}
endsnippet

snippet cl "console.log"
console.log(${2:"${1:something happened}"})
endsnippet

snippet cll "console.log labeled"
console.log("${1:someVar}: ", $1)
endsnippet

snippet ifundef "log if undefined"
if (${1:foo}[${2:bar}] === undefined) {
  console.log("$1: ", $1)
  console.log("$2: ", $2)
  ${3:debugger}
}
$0
endsnippet

# React
snippet rc "React Component"
export default class ${1:MyComponent} extends React.Component {
  constructor(props) {
    super(props)
  }

  render() {
    return (
      ${3:<div>
        $2
      </div>}
    )
  }
}
endsnippet

snippet slf "Stateless Function"
${1:export default} ({
  $2
}) => {
  return (
    ${0:<div>
      $3
    </div>}
  )
}
endsnippet

snippet sli "Stateless Function Implicit Return"
${1:export default} ({
  $2
}) => (
  ${0:<div>
    $3
  </div>}
)
endsnippet

snippet rrc "React Redux Connect"
import React from 'react'
import { connect } from 'react-redux'

import ${1:MyComponent} from './$1'

const mapStateToProps = (props, ownProps) => {
  return ({
    $2
  })
}

const mapDispatchToProps = (dispatch) => {
  return ({
    $0
  })
}

export default connect(mapStateToProps, mapDispatchToProps)($1)
endsnippet

# Redux
snippet fetchIt "fetch it from firebase"
fetch${1/\w+/\u$0/g}() {
  return (dispatch, getState) => {
    ${1:it}Ref.once('value', (snapshot) => {
      dispatch({ type: C.UPDATE_${1/\w/\u$0/g}, payload: snapshot.val() })
    })
  }
},
endsnippet

